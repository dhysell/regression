//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.16 at 04:49:41 PM MST 
//


package services.broker.objects.lexisnexis.clueproperty.response.actual;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{http://cp.com/rules/client}commonAdminType">
 *       &lt;sequence>
 *         &lt;element name="status">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="processing complete, with claims"/>
 *               &lt;enumeration value="processing complete, no claims, no inquiry history"/>
 *               &lt;enumeration value="processing complete, no claims, with inquiry history"/>
 *               &lt;enumeration value="not processed: invalid LexisNexis Account Number"/>
 *               &lt;enumeration value="not processed: insufficient search data"/>
 *               &lt;enumeration value="not processed: State Limitations"/>
 *               &lt;enumeration value="not processed: product not requested"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="service_type">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="C.L.U.E. Property and Real Property"/>
 *               &lt;enumeration value="Real Property only"/>
 *               &lt;enumeration value="C.L.U.E. Property only"/>
 *               &lt;enumeration value="Current Carrier / C.L.U.E. Property and Real Property"/>
 *               &lt;enumeration value="Current Carrier / C.L.U.E. Property Only"/>
 *               &lt;enumeration value="Current Carrier only"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="attachment1_processing_status">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="processing complete with Real Property results"/>
 *               &lt;enumeration value="processing complete, no Real Property results"/>
 *               &lt;enumeration value="not processed: invalid LexisNexis Account Number"/>
 *               &lt;enumeration value="not processed: insufficient search data"/>
 *               &lt;enumeration value="not processed: State Limitations"/>
 *               &lt;enumeration value="not processed: product not requested"/>
 *               &lt;enumeration value="not processed: product unavailable"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="attachment2_processing_status" minOccurs="0">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="Risk Only Report Returned"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="report_usage">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="Personal Property Underwriting"/>
 *               &lt;enumeration value="Personal Property Claims"/>
 *               &lt;enumeration value="Consumer Disclosure"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "status",
    "serviceType",
    "attachment1ProcessingStatus",
    "attachment2ProcessingStatus",
    "reportUsage"
})
@XmlRootElement(name = "admin")
public class Admin
    extends CommonAdminType
{

    @XmlElement(required = true)
    protected Admin.AdminStatusEnum status;
    @XmlElement(name = "service_type", required = true)
    protected Admin.ServiceTypeEnum serviceType;
    @XmlElement(name = "attachment1_processing_status", required = true)
    protected Admin.Attachment1ProcessingStatusEnum attachment1ProcessingStatus;
    @XmlElement(name = "attachment2_processing_status")
    protected Admin.Attachment2ProcessingStatusEnum attachment2ProcessingStatus;
    @XmlElement(name = "report_usage", required = true)
    protected Admin.ReportUsageEnum reportUsage;

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.AdminStatusEnum }
     *     
     */
    public Admin.AdminStatusEnum getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.AdminStatusEnum }
     *     
     */
    public void setStatus(Admin.AdminStatusEnum value) {
        this.status = value;
    }

    /**
     * Gets the value of the serviceType property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.ServiceTypeEnum }
     *     
     */
    public Admin.ServiceTypeEnum getServiceType() {
        return serviceType;
    }

    /**
     * Sets the value of the serviceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.ServiceTypeEnum }
     *     
     */
    public void setServiceType(Admin.ServiceTypeEnum value) {
        this.serviceType = value;
    }

    /**
     * Gets the value of the attachment1ProcessingStatus property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.Attachment1ProcessingStatusEnum }
     *     
     */
    public Admin.Attachment1ProcessingStatusEnum getAttachment1ProcessingStatus() {
        return attachment1ProcessingStatus;
    }

    /**
     * Sets the value of the attachment1ProcessingStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.Attachment1ProcessingStatusEnum }
     *     
     */
    public void setAttachment1ProcessingStatus(Admin.Attachment1ProcessingStatusEnum value) {
        this.attachment1ProcessingStatus = value;
    }

    /**
     * Gets the value of the attachment2ProcessingStatus property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.Attachment2ProcessingStatusEnum }
     *     
     */
    public Admin.Attachment2ProcessingStatusEnum getAttachment2ProcessingStatus() {
        return attachment2ProcessingStatus;
    }

    /**
     * Sets the value of the attachment2ProcessingStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.Attachment2ProcessingStatusEnum }
     *     
     */
    public void setAttachment2ProcessingStatus(Admin.Attachment2ProcessingStatusEnum value) {
        this.attachment2ProcessingStatus = value;
    }

    /**
     * Gets the value of the reportUsage property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.ReportUsageEnum }
     *     
     */
    public Admin.ReportUsageEnum getReportUsage() {
        return reportUsage;
    }

    /**
     * Sets the value of the reportUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.ReportUsageEnum }
     *     
     */
    public void setReportUsage(Admin.ReportUsageEnum value) {
        this.reportUsage = value;
    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="processing complete, with claims"/>
     *     &lt;enumeration value="processing complete, no claims, no inquiry history"/>
     *     &lt;enumeration value="processing complete, no claims, with inquiry history"/>
     *     &lt;enumeration value="not processed: invalid LexisNexis Account Number"/>
     *     &lt;enumeration value="not processed: insufficient search data"/>
     *     &lt;enumeration value="not processed: State Limitations"/>
     *     &lt;enumeration value="not processed: product not requested"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum AdminStatusEnum {

        @XmlEnumValue("processing complete, with claims")
        PROCESSING_COMPLETE_WITH_CLAIMS("processing complete, with claims"),
        @XmlEnumValue("processing complete, no claims, no inquiry history")
        PROCESSING_COMPLETE_NO_CLAIMS_NO_INQUIRY_HISTORY("processing complete, no claims, no inquiry history"),
        @XmlEnumValue("processing complete, no claims, with inquiry history")
        PROCESSING_COMPLETE_NO_CLAIMS_WITH_INQUIRY_HISTORY("processing complete, no claims, with inquiry history"),
        @XmlEnumValue("not processed: invalid LexisNexis Account Number")
        NOT_PROCESSED_INVALID_LEXIS_NEXIS_ACCOUNT_NUMBER("not processed: invalid LexisNexis Account Number"),
        @XmlEnumValue("not processed: insufficient search data")
        NOT_PROCESSED_INSUFFICIENT_SEARCH_DATA("not processed: insufficient search data"),
        @XmlEnumValue("not processed: State Limitations")
        NOT_PROCESSED_STATE_LIMITATIONS("not processed: State Limitations"),
        @XmlEnumValue("not processed: product not requested")
        NOT_PROCESSED_PRODUCT_NOT_REQUESTED("not processed: product not requested");
        private final String value;

        AdminStatusEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.AdminStatusEnum fromValue(String v) {
            for (Admin.AdminStatusEnum c: Admin.AdminStatusEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="processing complete with Real Property results"/>
     *     &lt;enumeration value="processing complete, no Real Property results"/>
     *     &lt;enumeration value="not processed: invalid LexisNexis Account Number"/>
     *     &lt;enumeration value="not processed: insufficient search data"/>
     *     &lt;enumeration value="not processed: State Limitations"/>
     *     &lt;enumeration value="not processed: product not requested"/>
     *     &lt;enumeration value="not processed: product unavailable"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum Attachment1ProcessingStatusEnum {

        @XmlEnumValue("processing complete with Real Property results")
        PROCESSING_COMPLETE_WITH_REAL_PROPERTY_RESULTS("processing complete with Real Property results"),
        @XmlEnumValue("processing complete, no Real Property results")
        PROCESSING_COMPLETE_NO_REAL_PROPERTY_RESULTS("processing complete, no Real Property results"),
        @XmlEnumValue("not processed: invalid LexisNexis Account Number")
        NOT_PROCESSED_INVALID_LEXIS_NEXIS_ACCOUNT_NUMBER("not processed: invalid LexisNexis Account Number"),
        @XmlEnumValue("not processed: insufficient search data")
        NOT_PROCESSED_INSUFFICIENT_SEARCH_DATA("not processed: insufficient search data"),
        @XmlEnumValue("not processed: State Limitations")
        NOT_PROCESSED_STATE_LIMITATIONS("not processed: State Limitations"),
        @XmlEnumValue("not processed: product not requested")
        NOT_PROCESSED_PRODUCT_NOT_REQUESTED("not processed: product not requested"),
        @XmlEnumValue("not processed: product unavailable")
        NOT_PROCESSED_PRODUCT_UNAVAILABLE("not processed: product unavailable");
        private final String value;

        Attachment1ProcessingStatusEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.Attachment1ProcessingStatusEnum fromValue(String v) {
            for (Admin.Attachment1ProcessingStatusEnum c: Admin.Attachment1ProcessingStatusEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="Risk Only Report Returned"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum Attachment2ProcessingStatusEnum {

        @XmlEnumValue("Risk Only Report Returned")
        RISK_ONLY_REPORT_RETURNED("Risk Only Report Returned");
        private final String value;

        Attachment2ProcessingStatusEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.Attachment2ProcessingStatusEnum fromValue(String v) {
            for (Admin.Attachment2ProcessingStatusEnum c: Admin.Attachment2ProcessingStatusEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="Personal Property Underwriting"/>
     *     &lt;enumeration value="Personal Property Claims"/>
     *     &lt;enumeration value="Consumer Disclosure"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum ReportUsageEnum {

        @XmlEnumValue("Personal Property Underwriting")
        PERSONAL_PROPERTY_UNDERWRITING("Personal Property Underwriting"),
        @XmlEnumValue("Personal Property Claims")
        PERSONAL_PROPERTY_CLAIMS("Personal Property Claims"),
        @XmlEnumValue("Consumer Disclosure")
        CONSUMER_DISCLOSURE("Consumer Disclosure");
        private final String value;

        ReportUsageEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.ReportUsageEnum fromValue(String v) {
            for (Admin.ReportUsageEnum c: Admin.ReportUsageEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="C.L.U.E. Property and Real Property"/>
     *     &lt;enumeration value="Real Property only"/>
     *     &lt;enumeration value="C.L.U.E. Property only"/>
     *     &lt;enumeration value="Current Carrier / C.L.U.E. Property and Real Property"/>
     *     &lt;enumeration value="Current Carrier / C.L.U.E. Property Only"/>
     *     &lt;enumeration value="Current Carrier only"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum ServiceTypeEnum {

        @XmlEnumValue("C.L.U.E. Property and Real Property")
        C_L_U_E_PROPERTY_AND_REAL_PROPERTY("C.L.U.E. Property and Real Property"),
        @XmlEnumValue("Real Property only")
        REAL_PROPERTY_ONLY("Real Property only"),
        @XmlEnumValue("C.L.U.E. Property only")
        C_L_U_E_PROPERTY_ONLY("C.L.U.E. Property only"),
        @XmlEnumValue("Current Carrier / C.L.U.E. Property and Real Property")
        CURRENT_CARRIER_C_L_U_E_PROPERTY_AND_REAL_PROPERTY("Current Carrier / C.L.U.E. Property and Real Property"),
        @XmlEnumValue("Current Carrier / C.L.U.E. Property Only")
        CURRENT_CARRIER_C_L_U_E_PROPERTY_ONLY("Current Carrier / C.L.U.E. Property Only"),
        @XmlEnumValue("Current Carrier only")
        CURRENT_CARRIER_ONLY("Current Carrier only");
        private final String value;

        ServiceTypeEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.ServiceTypeEnum fromValue(String v) {
            for (Admin.ServiceTypeEnum c: Admin.ServiceTypeEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }

}
