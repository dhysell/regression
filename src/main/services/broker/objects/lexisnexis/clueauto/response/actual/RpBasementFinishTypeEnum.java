//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.16 at 04:49:21 PM MST 
//


package services.broker.objects.lexisnexis.clueauto.response.actual;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for null.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType>
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Type Unknown"/>
 *     &lt;enumeration value="Finished"/>
 *     &lt;enumeration value="None"/>
 *     &lt;enumeration value="Partial Daylight"/>
 *     &lt;enumeration value="Full"/>
 *     &lt;enumeration value="Full Daylight"/>
 *     &lt;enumeration value="Partial"/>
 *     &lt;enumeration value="Unfinished"/>
 *     &lt;enumeration value="Unknown"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "")
@XmlEnum
public enum RpBasementFinishTypeEnum {

    @XmlEnumValue("Type Unknown")
    TYPE_UNKNOWN("Type Unknown"),
    @XmlEnumValue("Finished")
    FINISHED("Finished"),
    @XmlEnumValue("None")
    NONE("None"),
    @XmlEnumValue("Partial Daylight")
    PARTIAL_DAYLIGHT("Partial Daylight"),
    @XmlEnumValue("Full")
    FULL("Full"),
    @XmlEnumValue("Full Daylight")
    FULL_DAYLIGHT("Full Daylight"),
    @XmlEnumValue("Partial")
    PARTIAL("Partial"),
    @XmlEnumValue("Unfinished")
    UNFINISHED("Unfinished"),
    @XmlEnumValue("Unknown")
    UNKNOWN("Unknown");
    private final String value;

    RpBasementFinishTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RpBasementFinishTypeEnum fromValue(String v) {
        for (RpBasementFinishTypeEnum c: RpBasementFinishTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
