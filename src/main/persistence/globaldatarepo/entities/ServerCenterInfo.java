package persistence.globaldatarepo.entities;

import gwclockhelpers.ApplicationOrCenter;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;
import persistence.enums.ServerID;

import javax.persistence.*;
import javax.persistence.criteria.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import static javax.persistence.GenerationType.IDENTITY;

// default package
// Generated Jan 10, 2017 6:07:41 PM by Hibernate Tools 5.2.0.Beta1

/**
 * ServerCenterInfo generated by hbm2java
 */
@Entity
@Table(name = "Server_CenterInfo", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class ServerCenterInfo {

	private Integer id;
	private String serverId;
	private String pcCodeBase;
	private String pcRevision;
	private String pcDate;
	private String bcCodeBase;
	private String bcRevision;
	private String bcDate;
	private String abCodeBase;
	private String abRevision;
	private String abDate;
	private String ccCodeBase;
	private String ccRevision;
	private String ccDate;
	private String serverDate;

	public ServerCenterInfo() {
	}

	public ServerCenterInfo(String serverId) {
		this.serverId = serverId;
	}

	public ServerCenterInfo(String serverId, String pcCodeBase, String pcRevision, String pcDate, String bcCodeBase, String bcRevision, String bcDate, String abCodeBase, String abRevision, String abDate, String ccCodeBase,
			String ccRevision, String ccDate, String serverDate) {
		this.serverId = serverId;
		this.pcCodeBase = pcCodeBase;
		this.pcRevision = pcRevision;
		this.pcDate = pcDate;
		this.bcCodeBase = bcCodeBase;
		this.bcRevision = bcRevision;
		this.bcDate = bcDate;
		this.abCodeBase = abCodeBase;
		this.abRevision = abRevision;
		this.abDate = abDate;
		this.ccCodeBase = ccCodeBase;
		this.ccRevision = ccRevision;
		this.ccDate = ccDate;
		this.serverDate = serverDate;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "ServerID", nullable = false, length = 50)
	public String getServerId() {
		return this.serverId;
	}

	public void setServerId(String serverId) {
		this.serverId = serverId;
	}

	@Column(name = "PC_CodeBase", length = 50)
	public String getPcCodeBase() {
		return this.pcCodeBase;
	}

	public void setPcCodeBase(String pcCodeBase) {
		this.pcCodeBase = pcCodeBase;
	}

	@Column(name = "PC_Revision", length = 50)
	public String getPcRevision() {
		return this.pcRevision;
	}

	public void setPcRevision(String pcRevision) {
		this.pcRevision = pcRevision;
	}

	@Column(name = "PC_Date", length = 10)
	public String getPcDate() {
		return this.pcDate;
	}

	public void setPcDate(String pcDate) {
		this.pcDate = pcDate;
	}

	@Column(name = "BC_CodeBase", length = 50)
	public String getBcCodeBase() {
		return this.bcCodeBase;
	}

	public void setBcCodeBase(String bcCodeBase) {
		this.bcCodeBase = bcCodeBase;
	}

	@Column(name = "BC_Revision", length = 50)
	public String getBcRevision() {
		return this.bcRevision;
	}

	public void setBcRevision(String bcRevision) {
		this.bcRevision = bcRevision;
	}

	@Column(name = "BC_Date", length = 10)
	public String getBcDate() {
		return this.bcDate;
	}

	public void setBcDate(String bcDate) {
		this.bcDate = bcDate;
	}

	@Column(name = "AB_CodeBase", length = 50)
	public String getAbCodeBase() {
		return this.abCodeBase;
	}

	public void setAbCodeBase(String abCodeBase) {
		this.abCodeBase = abCodeBase;
	}

	@Column(name = "AB_Revision", length = 50)
	public String getAbRevision() {
		return this.abRevision;
	}

	public void setAbRevision(String abRevision) {
		this.abRevision = abRevision;
	}

	@Column(name = "AB_Date", length = 10)
	public String getAbDate() {
		return this.abDate;
	}

	public void setAbDate(String abDate) {
		this.abDate = abDate;
	}

	@Column(name = "CC_CodeBase", length = 50)
	public String getCcCodeBase() {
		return this.ccCodeBase;
	}

	public void setCcCodeBase(String ccCodeBase) {
		this.ccCodeBase = ccCodeBase;
	}

	@Column(name = "CC_Revision", length = 50)
	public String getCcRevision() {
		return this.ccRevision;
	}

	public void setCcRevision(String ccRevision) {
		this.ccRevision = ccRevision;
	}

	@Column(name = "CC_Date", length = 10)
	public String getCcDate() {
		return this.ccDate;
	}

	public void setCcDate(String ccDate) {
		this.ccDate = ccDate;
	}

	@Column(name = "ServerDate", length = 10)
	public String getServerDate() {
		return this.serverDate;
	}

	public void setServerDate(String serverDate) {
		this.serverDate = serverDate;
	}
	
	@Transient
	public static void updateServerInfo(ServerID serverID1, ApplicationOrCenter centerToUpdate, String revision, String codeBase) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		Transaction hibernateTransaction = null;
		try {
			ServerCenterInfo server = getServerInfo(serverID1.getValue());
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DATE, 0);

			String dateToGet = dateFormat.format(cal.getTime());

            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			
			session = sessionFactory.openSession();
			
			hibernateTransaction = session.beginTransaction();
			
			
			switch (centerToUpdate) {
				case BillingCenter:
					server.setBcRevision(revision);
					server.setBcCodeBase(codeBase);
					server.setBcDate(dateToGet);
					break;
				case ClaimCenter:
					server.setCcRevision(revision);
					server.setCcCodeBase(codeBase);
					server.setCcDate(dateToGet);
					break;
				case ContactManager:
					server.setAbRevision(revision);
					server.setAbCodeBase(codeBase);
					server.setAbDate(dateToGet);
					break;
				case PolicyCenter:
					server.setPcRevision(revision);
					server.setPcCodeBase(codeBase);
					server.setPcDate(dateToGet);
					break;
				default:
					break;
			}
			

			session.update(server);
			hibernateTransaction.commit();
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
		
	}
	
	@Transient
	public static ServerCenterInfo getServerInfo(String serverName) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<ServerCenterInfo> serverInfoCriteria = builder.createQuery(ServerCenterInfo.class);
			Root<ServerCenterInfo> serverInfoCriteriaRoot = serverInfoCriteria.from(ServerCenterInfo.class);
			Expression<String> serverID = serverInfoCriteriaRoot.get("serverId");
			Predicate serverIDEquals = builder.equal(serverID, serverName);
			serverInfoCriteria.select(serverInfoCriteriaRoot).where(serverIDEquals);
			
			List<ServerCenterInfo> results = session.createQuery(serverInfoCriteria).getResultList();
			
			session.getTransaction().commit();
			
			return results.get(0);
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}

}
