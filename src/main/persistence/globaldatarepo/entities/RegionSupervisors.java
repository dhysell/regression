package persistence.globaldatarepo.entities;
// default package
// Generated May 21, 2018 10:36:44 AM by Hibernate Tools 5.2.5.Final

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;

import javax.persistence.*;
import javax.persistence.criteria.*;
import java.util.List;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * RegionSupervisors generated by hbm2java
 */
@Entity
@Table(name = "RegionSupervisors", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class RegionSupervisors {

	private Integer id;
	private int regionNumber;
	private String firstName;
	private String middleName;
	private String lastName;
	private String userName;
	private String password;

	public RegionSupervisors() {
	}

	public RegionSupervisors(int regionNumber, String firstName, String lastName, String userName, String password) {
		this.regionNumber = regionNumber;
		this.firstName = firstName;
		this.lastName = lastName;
		this.userName = userName;
		this.password = password;
	}

	public RegionSupervisors(int regionNumber, String firstName, String middleName, String lastName, String userName,
			String password) {
		this.regionNumber = regionNumber;
		this.firstName = firstName;
		this.middleName = middleName;
		this.lastName = lastName;
		this.userName = userName;
		this.password = password;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "RegionNumber", nullable = false)
	public int getRegionNumber() {
		return this.regionNumber;
	}

	public void setRegionNumber(int regionNumber) {
		this.regionNumber = regionNumber;
	}

	@Column(name = "FirstName", nullable = false, length = 200)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "MiddleName", length = 200)
	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	@Column(name = "LastName", nullable = false, length = 200)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "UserName", nullable = false, length = 200)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "Password", nullable = false, length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	
	@Transient
	public RegionSupervisors getRegionalSupervisor_ByNumber(int regionNumber) throws Exception {
		
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<RegionSupervisors> agentCriteria = builder.createQuery(RegionSupervisors.class);
			Root<RegionSupervisors> agentCriteriaRoot = agentCriteria.from(RegionSupervisors.class);
			Expression<Integer> agentRegion = agentCriteriaRoot.get("regionNumber");
			Predicate agentRegionLike = builder.equal(agentRegion, regionNumber);
			agentCriteria.select(agentCriteriaRoot).where(agentRegionLike);
			
			List<RegionSupervisors> results = session.createQuery(agentCriteria).getResultList();
			RegionSupervisors supervisor = results.get(0);
            
            session.getTransaction().commit();
            
            return supervisor;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
		
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
