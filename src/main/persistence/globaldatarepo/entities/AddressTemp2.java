package persistence.globaldatarepo.entities;
// default package
// Generated Jan 8, 2018 8:59:48 AM by Hibernate Tools 5.2.5.Final

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;
import persistence.globaldatarepo.helpers.TeritoryCodesHelper;
import persistence.helpers.StringsUtils;

import javax.persistence.*;
import javax.persistence.criteria.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * AddressTemp2 generated by hbm2java
 */
@Entity
@Table(name = "AddressTemp2", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class AddressTemp2 {

	private long id;
	private Boolean standardizeStatusFbm;
	private String addressLine1;
	private String addressLine2;
	private String officeNumberFbm;
	private String city;
	private String county;
	private String postalCode;
	private Integer state;
	private Integer addressType;
	private BigDecimal longitudeFbm;
	private BigDecimal latitudeFbm;
	private String state2;
	private String territoryCode;
	private String protectionClass;
	private String zip;
	private String zip4;

	public AddressTemp2() {
	}

	public AddressTemp2(long id) {
		this.id = id;
	}

	public AddressTemp2(long id, Boolean standardizeStatusFbm, String addressLine1, String addressLine2,
			String officeNumberFbm, String city, String county, String postalCode, Integer state, Integer addressType,
			BigDecimal longitudeFbm, BigDecimal latitudeFbm, String state2, String territoryCode,
			String protectionClass, String zip, String zip4) {
		this.id = id;
		this.standardizeStatusFbm = standardizeStatusFbm;
		this.addressLine1 = addressLine1;
		this.addressLine2 = addressLine2;
		this.officeNumberFbm = officeNumberFbm;
		this.city = city;
		this.county = county;
		this.postalCode = postalCode;
		this.state = state;
		this.addressType = addressType;
		this.longitudeFbm = longitudeFbm;
		this.latitudeFbm = latitudeFbm;
		this.state2 = state2;
		this.territoryCode = territoryCode;
		this.protectionClass = protectionClass;
		this.zip = zip;
		this.zip4 = zip4;
	}

	public AddressTemp2(String addressLine1, String city2, String State, String zip2, Object object, Object object2, int territorycode) {
		setAddressLine1(addressLine1);
		setCity(city2);
		setState2(State);
		setZip(zip2);
		setTerritoryCode(String.valueOf(territorycode));
	}

	@Id

	@Column(name = "ID", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "StandardizeStatus_FBM")
	public Boolean getStandardizeStatusFbm() {
		return this.standardizeStatusFbm;
	}

	public void setStandardizeStatusFbm(Boolean standardizeStatusFbm) {
		this.standardizeStatusFbm = standardizeStatusFbm;
	}

	@Column(name = "AddressLine1", length = 60)
	public String getAddressLine1() {
		return this.addressLine1;
	}

	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}

	@Column(name = "AddressLine2", length = 60)
	public String getAddressLine2() {
		return this.addressLine2;
	}

	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}

	@Column(name = "OfficeNumber_FBM", length = 6)
	public String getOfficeNumberFbm() {
		return this.officeNumberFbm;
	}

	public void setOfficeNumberFbm(String officeNumberFbm) {
		this.officeNumberFbm = officeNumberFbm;
	}

	@Column(name = "City", length = 60)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Column(name = "County", length = 60)
	public String getCounty() {
		return this.county;
	}

	public void setCounty(String county) {
		this.county = county;
	}

	@Column(name = "PostalCode", length = 60)
	public String getPostalCode() {
		return this.postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	@Column(name = "State")
	public Integer getState() {
		return this.state;
	}

	public void setState(Integer state) {
		this.state = state;
	}

	@Column(name = "AddressType")
	public Integer getAddressType() {
		return this.addressType;
	}

	public void setAddressType(Integer addressType) {
		this.addressType = addressType;
	}

	@Column(name = "Longitude_FBM", precision = 9, scale = 6)
	public BigDecimal getLongitudeFbm() {
		return this.longitudeFbm;
	}

	public void setLongitudeFbm(BigDecimal longitudeFbm) {
		this.longitudeFbm = longitudeFbm;
	}

	@Column(name = "Latitude_FBM", precision = 9, scale = 6)
	public BigDecimal getLatitudeFbm() {
		return this.latitudeFbm;
	}

	public void setLatitudeFbm(BigDecimal latitudeFbm) {
		this.latitudeFbm = latitudeFbm;
	}

	@Column(name = "State2", length = 100)
	public String getState2() {
		return this.state2;
	}

	public void setState2(String state2) {
		this.state2 = state2;
	}

	@Column(name = "TerritoryCode", length = 50)
	public String getTerritoryCode() {
		return this.territoryCode;
	}

	public void setTerritoryCode(String territoryCode) {
		this.territoryCode = territoryCode;
	}

	@Column(name = "ProtectionClass", length = 50)
	public String getProtectionClass() {
		return this.protectionClass;
	}

	public void setProtectionClass(String protectionClass) {
		this.protectionClass = protectionClass;
	}

	@Column(name = "Zip", length = 50)
	public String getZip() {
		return this.zip;
	}

	public void setZip(String zip) {
		this.zip = zip;
	}

	@Column(name = "Zip4", length = 50)
	public String getZip4() {
		return this.zip4;
	}

	public void setZip4(String zip4) {
		this.zip4 = zip4;
	}
	
	@Transient
	public static AddressTemp2 getRandomAddress() throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> addressCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> addressRoot = addressCriteria.from(AddressTemp2.class);
			Expression<String> poBox = addressRoot.get("addressLine1");
			Expression<String> inState = addressRoot.get("state2");
			Predicate notLikePOBox = builder.notLike(poBox, "PO Box%");
			Predicate notOutOfState = builder.like(inState, "Idaho");
			List<Predicate> predicates = new ArrayList<Predicate>();
			predicates.add(notOutOfState);
			predicates.add(notLikePOBox);
			
			addressCriteria.select(addressRoot).where(predicates.toArray(new Predicate[]{}));
			
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(200000);
//			System.out.println(index);
			
			List<AddressTemp2> results = session.createQuery(addressCriteria).setFirstResult(index).setMaxResults(10).getResultList();
			session.getTransaction().commit();
			
			randomGenerator = new Random();
			index = randomGenerator.nextInt(9);
			
			return results.get(index);
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	@Transient
	public static AddressTemp2 getRandomAddress_OUTOFSTATE() throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> addressCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> addressRoot = addressCriteria.from(AddressTemp2.class);
			Expression<String> poBox = addressRoot.get("addressLine1");
			Expression<String> inState = addressRoot.get("state2");
			Predicate notLikePOBox = builder.notLike(poBox, "PO Box%");
			Predicate notOutOfState = builder.notLike(inState, "Idaho");
			List<Predicate> predicates = new ArrayList<Predicate>();
			predicates.add(notOutOfState);
			predicates.add(notLikePOBox);
			
			addressCriteria.select(addressRoot).where(predicates.toArray(new Predicate[]{}));
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(30000);
			System.out.println(index);
			
			List<AddressTemp2> results = session.createQuery(addressCriteria).setFirstResult(index).setMaxResults(10).getResultList();
			session.getTransaction().commit();
			
			randomGenerator = new Random();
			index = randomGenerator.nextInt(9);
			
			return results.get(index);
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	@Transient
	public static AddressTemp2 getRandomAddress_POBOX() throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> addressCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> addressRoot = addressCriteria.from(AddressTemp2.class);
			Expression<String> poBox = addressRoot.get("addressLine1");
			Expression<String> inState = addressRoot.get("state2");
			Predicate notLikePOBox = builder.like(poBox, "PO Box%");
			Predicate notOutOfState = builder.like(inState, "Idaho");
			List<Predicate> predicates = new ArrayList<Predicate>();
			predicates.add(notOutOfState);
			predicates.add(notLikePOBox);
			
			addressCriteria.select(addressRoot).where(predicates.toArray(new Predicate[]{}));
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(30000);
			System.out.println(index);
			
			List<AddressTemp2> results = session.createQuery(addressCriteria).setFirstResult(index).setMaxResults(10).getResultList();
			session.getTransaction().commit();
			
			randomGenerator = new Random();
			index = randomGenerator.nextInt(9);
			
			return results.get(index);
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	
	
	@Transient
	public static List<AddressTemp2> getRandomAddressList(int listsize) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> addressCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> addressCriteriaRoot = addressCriteria.from(AddressTemp2.class);
			addressCriteria.select(addressCriteriaRoot);
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(300000);
			
			List<AddressTemp2> results = session.createQuery(addressCriteria).setFirstResult(index).setMaxResults(listsize).getResultList();
			session.getTransaction().commit();
			
			return results;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	
	@Transient
	public static void updateLatAndLong(List<AddressTemp2> addressList) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			for(AddressTemp2 address : addressList) {
				CriteriaBuilder builder = session.getCriteriaBuilder();
				CriteriaQuery<AddressTemp2> addressCriteria = builder.createQuery(AddressTemp2.class);
				Root<AddressTemp2> addressCriteriaRoot = addressCriteria.from(AddressTemp2.class);
				addressCriteria.select(addressCriteriaRoot);
				
				Expression<String> addressID = addressCriteriaRoot.get("id");
				Predicate addressIDLike = builder.like(addressID, "%" + StringsUtils.specialCharacterEscape(String.valueOf(address.getId())) + "%");
				addressCriteria.select(addressCriteriaRoot).where(addressIDLike);
				
				session.update(address);
			}
			
			session.getTransaction().commit();
			
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	@Transient
	public static void updateProtectionClass(AddressTemp2 address) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> addressCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> addressCriteriaRoot = addressCriteria.from(AddressTemp2.class);
			addressCriteria.select(addressCriteriaRoot);
			
			Expression<String> addressID = addressCriteriaRoot.get("id");
			Predicate addressIDLike = builder.like(addressID, "%" + StringsUtils.specialCharacterEscape(String.valueOf(address.getId())) + "%");
			addressCriteria.select(addressCriteriaRoot).where(addressIDLike);
			
			session.update(address);
			
			session.getTransaction().commit();
			
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	public static AddressTemp2 getRandomAddressByZip(String zip) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		List<AddressTemp2> results = new ArrayList<AddressTemp2>();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> zipCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> zipCriteriaRoot = zipCriteria.from(AddressTemp2.class);
			Expression<String> zipcode = zipCriteriaRoot.get("zip");
			Predicate zipcodeLike = builder.like(zipcode, "%" + StringsUtils.specialCharacterEscape(zip) + "%");
			zipCriteria.select(zipCriteriaRoot).where(zipcodeLike);
			
			results = session.createQuery(zipCriteria).getResultList();
			
			if(results.isEmpty()) {
				TeritoryCodes territory = TeritoryCodesHelper.getAddressByZip(zip);
				return new AddressTemp2("123 N Main", territory.getCity(), "Idaho",  territory.getZip(), null, null, Integer.valueOf(territory.getCode()));
			}
			
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(results.size());
			AddressTemp2 address = results.get(index);
			
			session.getTransaction().commit();
			
			return address;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			if(!results.isEmpty()) {
				session.clear();				
			}
            pf.close();
		}
	}
	
	public static AddressTemp2 getRandomAddressByProtectionClass(String protectionClass) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		List<AddressTemp2> results = new ArrayList<AddressTemp2>();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<AddressTemp2> protectionCriteria = builder.createQuery(AddressTemp2.class);
			Root<AddressTemp2> protectionCriteriaRoot = protectionCriteria.from(AddressTemp2.class);
			Expression<String> protection = protectionCriteriaRoot.get("protectionClass");
			Predicate protectionClassLike = builder.like(protection, "%" + StringsUtils.specialCharacterEscape(protectionClass) + "%");
			protectionCriteria.select(protectionCriteriaRoot).where(protectionClassLike);
			
			results = session.createQuery(protectionCriteria).getResultList();
			
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(results.size());
			AddressTemp2 address = results.get(index);
			
			session.getTransaction().commit();
			
			return address;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			if(!results.isEmpty()) {
				session.clear();				
			}
            pf.close();
		}
	}

}
