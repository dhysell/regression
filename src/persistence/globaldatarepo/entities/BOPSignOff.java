package persistence.globaldatarepo.entities;
// default package
// Generated Mar 6, 2017 5:33:24 PM by Hibernate Tools 5.2.0.Beta1

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;
import persistence.helpers.StringsUtils;

import javax.persistence.*;
import javax.persistence.criteria.*;
import java.beans.Transient;
import java.util.List;
import java.util.Random;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * BopsignOff generated by hbm2java
 */
@Entity
@Table(name = "BOPSignOff", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class BOPSignOff {

	private Integer id;
	private String accountNumber;
	private String accountName;
	private String accountAgent;
	private String accountUw;
	private String accountExpirationDate;
	private String numberOfLocations;
	private String numberOfBuildingsPer;
	private String leinHolderName;
	private String leinHolderAccount;
	private String loanNumber;
	private String paymentType;
	private String accountStatus;

	public BOPSignOff() {
	}

	public BOPSignOff(String accountNumber, String accountName, String accountAgent, String accountUw, String accountExpirationDate, String numberOfLocations, String numberOfBuildingsPer, String leinHolderName, String leinHolderAccount,
			String loanNumber, String paymentType, String accountStatus) {
		this.accountNumber = accountNumber;
		this.accountName = accountName;
		this.accountAgent = accountAgent;
		this.accountUw = accountUw;
		this.accountExpirationDate = accountExpirationDate;
		this.numberOfLocations = numberOfLocations;
		this.numberOfBuildingsPer = numberOfBuildingsPer;
		this.leinHolderName = leinHolderName;
		this.leinHolderAccount = leinHolderAccount;
		this.loanNumber = loanNumber;
		this.paymentType = paymentType;
		this.accountStatus = accountStatus;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "AccountNumber", length = 500)
	public String getAccountNumber() {
		return this.accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	@Column(name = "AccountName", length = 500)
	public String getAccountName() {
		return this.accountName;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}

	@Column(name = "AccountAgent", length = 500)
	public String getAccountAgent() {
		return this.accountAgent;
	}

	public void setAccountAgent(String accountAgent) {
		this.accountAgent = accountAgent;
	}

	@Column(name = "AccountUW", length = 500)
	public String getAccountUw() {
		return this.accountUw;
	}

	public void setAccountUw(String accountUw) {
		this.accountUw = accountUw;
	}

	@Column(name = "AccountExpirationDate", length = 500)
	public String getAccountExpirationDate() {
		return this.accountExpirationDate;
	}

	public void setAccountExpirationDate(String accountExpirationDate) {
		this.accountExpirationDate = accountExpirationDate;
	}

	@Column(name = "NumberOfLocations", length = 500)
	public String getNumberOfLocations() {
		return this.numberOfLocations;
	}

	public void setNumberOfLocations(String numberOfLocations) {
		this.numberOfLocations = numberOfLocations;
	}

	@Column(name = "NumberOfBuildingsPer", length = 500)
	public String getNumberOfBuildingsPer() {
		return this.numberOfBuildingsPer;
	}

	public void setNumberOfBuildingsPer(String numberOfBuildingsPer) {
		this.numberOfBuildingsPer = numberOfBuildingsPer;
	}

	@Column(name = "LeinHolderName", length = 500)
	public String getLeinHolderName() {
		return this.leinHolderName;
	}

	public void setLeinHolderName(String leinHolderName) {
		this.leinHolderName = leinHolderName;
	}

	@Column(name = "LeinHolderAccount", length = 500)
	public String getLeinHolderAccount() {
		return this.leinHolderAccount;
	}

	public void setLeinHolderAccount(String leinHolderAccount) {
		this.leinHolderAccount = leinHolderAccount;
	}

	@Column(name = "LoanNumber", length = 500)
	public String getLoanNumber() {
		return this.loanNumber;
	}

	public void setLoanNumber(String loanNumber) {
		this.loanNumber = loanNumber;
	}

	@Column(name = "PaymentType", length = 500)
	public String getPaymentType() {
		return this.paymentType;
	}

	public void setPaymentType(String paymentType) {
		this.paymentType = paymentType;
	}

	@Column(name = "AccountStatus", length = 500)
	public String getAccountStatus() {
		return this.accountStatus;
	}

	public void setAccountStatus(String accountStatus) {
		this.accountStatus = accountStatus;
	}
	
	
	
	
	@Transient
	public static List<BOPSignOff> getAllAccounts() throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<BOPSignOff> bopSignOffCriteria = builder.createQuery(BOPSignOff.class);
			Root<BOPSignOff> bopSignOffCriteriaRoot = bopSignOffCriteria.from(BOPSignOff.class);
			bopSignOffCriteria.select(bopSignOffCriteriaRoot);
			
			List<BOPSignOff> results = session.createQuery(bopSignOffCriteria).getResultList();
			
			session.getTransaction().commit();
			
			return results;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
		
	}
	
	@Transient
	public static List<BOPSignOff> getAllAccountsNullPaymentPlan() throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<BOPSignOff> bopSignOffCriteria = builder.createQuery(BOPSignOff.class);
			Root<BOPSignOff> bopSignOffCriteriaRoot = bopSignOffCriteria.from(BOPSignOff.class);
			bopSignOffCriteria.select(bopSignOffCriteriaRoot);
			Expression<String> paymentType = bopSignOffCriteriaRoot.get("paymentType");
			Predicate paymentTypeIsNull = builder.isNull(paymentType);
			bopSignOffCriteria.select(bopSignOffCriteriaRoot).where(paymentTypeIsNull);
			
			List<BOPSignOff> results = session.createQuery(bopSignOffCriteria).getResultList();
			
			session.getTransaction().commit();
			
			return results;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
		
	}
	
	
	@Transient
	public static void createNew(BOPSignOff accountInfo) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			
			session = sessionFactory.openSession();
			
			session.beginTransaction();

			session.save(accountInfo);
			
			session.getTransaction().commit();
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	
	@Transient
	public static void updatePaymentplan(BOPSignOff bop, String paymentplan) throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<BOPSignOff> bopSignOffCriteria = builder.createQuery(BOPSignOff.class);
			Root<BOPSignOff> bopSignOffCriteriaRoot = bopSignOffCriteria.from(BOPSignOff.class);
			bopSignOffCriteria.select(bopSignOffCriteriaRoot);
			Expression<String> accountNumber = bopSignOffCriteriaRoot.get("accountNumber");
			Predicate accountNumberLike = builder.like(accountNumber, "%" + StringsUtils.specialCharacterEscape(bop.getAccountNumber()) + "%");
			bopSignOffCriteria.select(bopSignOffCriteriaRoot).where(accountNumberLike);
			
			List<BOPSignOff> results = session.createQuery(bopSignOffCriteria).getResultList();
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(results.size());
			
			BOPSignOff bopaccount = results.get(index);
			//increment class code useage
			bopaccount.setPaymentType(paymentplan);
			session.update(bopaccount);
            
            session.getTransaction().commit();
            
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	@Transient
	public static void dropTableRows() throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();
			session.beginTransaction();
			
			session.createQuery("DELETE from BOPSignOff").executeUpdate();

			session.getTransaction().commit();
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	
	
	
	
	
	

}























