package persistence.globaldatarepo.entities;
// default package
// Generated Aug 16, 2018 9:05:30 AM by Hibernate Tools 5.2.10.Final

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;

import javax.persistence.*;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.List;
import java.util.Random;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * RoleAgentChange generated by hbm2java
 */
@Entity
@Table(name = "Role_AgentChange", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class RoleAgentChange {

	private Integer id;
	private String name;
	private String userName;
	private String password;

	public RoleAgentChange() {
	}

	public RoleAgentChange(String name, String userName, String password) {
		this.name = name;
		this.userName = userName;
		this.password = password;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "Name", nullable = false, length = 200)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "userName", nullable = false, length = 50)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "Password", nullable = false, length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	@Transient
	public static RoleAgentChange getRandom() throws Exception {	
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<RoleAgentChange> agentCriteria = builder.createQuery(RoleAgentChange.class);
			Root<RoleAgentChange> agentCriteriaRoot = agentCriteria.from(RoleAgentChange.class);
			
			List<RoleAgentChange> results = session.createQuery(agentCriteria).getResultList();
			
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(results.size());
			
			RoleAgentChange agent = results.get(index);
            
            session.getTransaction().commit();
            
            return agent;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}

}
