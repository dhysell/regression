package persistence.globaldatarepo.entities;
// Generated Nov 29, 2018 1:09:51 PM by Hibernate Tools 5.2.10.Final

import org.hibernate.NonUniqueObjectException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;

import javax.persistence.*;
import java.util.List;

/**
 * UsersAuthorityProfile generated by hbm2java
 */
@Entity
@Table(name = "Users_AuthorityProfile", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class UsersAuthorityProfile {

	private String type;
	private String comparison;
	private String value;
	private String description;

	public UsersAuthorityProfile() {
	}

	public UsersAuthorityProfile(String type) {
		this.type = type;
	}

	public UsersAuthorityProfile(String type, String comparison, String value, String description) {
		this.type = type;
		this.comparison = comparison;
		this.value = value;
		this.description = description;
	}

	@Id

	@Column(name = "TYPE", unique = true, nullable = false, length = 200)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "COMPARISON", length = 200)
	public String getComparison() {
		return this.comparison;
	}

	public void setComparison(String comparison) {
		this.comparison = comparison;
	}

	@Column(name = "VALUE", length = 50)
	public String getValue() {
		return this.value;
	}

	public void setValue(String value) {
		this.value = value;
	}

	@Column(name = "DESCRIPTION", length = 200)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Transient
	public static void updateUsersAuthorityProfileTable(List<UsersAuthorityProfile> userRoleList) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
		PersistenceFactory pf = new PersistenceFactory();
		try {
			sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);

			session = sessionFactory.openSession();

			session.beginTransaction();
			for(UsersAuthorityProfile role : userRoleList) {
				try {
					session.save(role);
				} catch (NonUniqueObjectException e) {
				}
			}

			session.getTransaction().commit();
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
			pf.close();
		}

	}

	@Transient
	public static void updateUsersAuthorityProfileTable(UsersAuthorityProfile profile) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
		PersistenceFactory pf = new PersistenceFactory();
		try {
			sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);

			session = sessionFactory.openSession();

			session.beginTransaction();
			session.save(profile);

			session.getTransaction().commit();
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
			pf.close();
		}

	}

}
