package persistence.globaldatarepo.entities;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import persistence.config.PersistenceFactory;
import persistence.enums.HibernateConfigs;
import persistence.helpers.StringsUtils;

import javax.persistence.*;
import javax.persistence.criteria.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * ZipCodesIdaho generated by hbm2java
 */
@Entity
@Table(name = "ZipCodesIdaho", schema = "dbo", catalog = "QAWIZPROGlobalDataRepository")
public class ZipCodesIdaho {

	private int zip;
	private String city;
	private String county;
	
	@Transient
	private List<String> cityList = new ArrayList<String>();

	public ZipCodesIdaho() {
	}

	public ZipCodesIdaho(int zip) {
		this.zip = zip;
	}

	public ZipCodesIdaho(int zip, String city, String county) {
		this.zip = zip;
		this.city = city;
		this.county = county;
	}

	@Id

	@Column(name = "Zip", unique = true, nullable = false)
	public int getZip() {
		return this.zip;
	}

	public void setZip(int zip) {
		this.zip = zip;
	}

	@Column(name = "City", length = 100)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Column(name = "County", length = 100)
	public String getCounty() {
		return this.county;
	}

	public void setCounty(String county) {
		this.county = county;
	}
	
	@Transient
	public List<String> getCityList() {
		return this.cityList;
	}

	@Transient
	public static ZipCodesIdaho getZipCodeObject(String zip) throws Exception {
		
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();
			
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<ZipCodesIdaho> zipCodeCriteria = builder.createQuery(ZipCodesIdaho.class);
			Root<ZipCodesIdaho> zipCodeCriteriaRoot = zipCodeCriteria.from(ZipCodesIdaho.class);
			Expression<String> zipCode = zipCodeCriteriaRoot.get("zip");
			Predicate zipCodeLike = builder.like(zipCode, "%" + StringsUtils.specialCharacterEscape(zip) + "%");
			zipCodeCriteria.select(zipCodeCriteriaRoot).where(zipCodeLike);
			
			List<ZipCodesIdaho> results = session.createQuery(zipCodeCriteria).getResultList();
			
			Random randomGenerator = new Random();
			int index = randomGenerator.nextInt(results.size());
			ZipCodesIdaho returnValue = results.get(index);

			session.getTransaction().commit();

			return returnValue;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}
	
	@Transient
	public static List<ZipCodesIdaho> getALLZipCodes() throws Exception {
		
		SessionFactory sessionFactory = null;
		Session session = null;
        PersistenceFactory pf = new PersistenceFactory();
		try {
            sessionFactory = pf.getSessionFactory(HibernateConfigs.GlobalDataRepository);
			session = sessionFactory.openSession();

			session.beginTransaction();

			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<ZipCodesIdaho> zipCodeCriteria = builder.createQuery(ZipCodesIdaho.class);
			Root<ZipCodesIdaho> zipCodeCriteriaRoot = zipCodeCriteria.from(ZipCodesIdaho.class);
			zipCodeCriteria.select(zipCodeCriteriaRoot);
			
			List<ZipCodesIdaho> results = session.createQuery(zipCodeCriteria).getResultList();

			session.getTransaction().commit();

			return results;
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			session.clear();
            pf.close();
		}
	}

}











