//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.16 at 04:49:41 PM MST 
//


package services.broker.objects.lexisnexis.clueproperty.response.actual;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for null.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType>
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="A-Frame"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="Historical"/>
 *     &lt;enumeration value="Bungalow"/>
 *     &lt;enumeration value="Log Cabin/Rustic"/>
 *     &lt;enumeration value="Cape Cod"/>
 *     &lt;enumeration value="Colonial"/>
 *     &lt;enumeration value="Contemporary"/>
 *     &lt;enumeration value="Conventional"/>
 *     &lt;enumeration value="Cottage"/>
 *     &lt;enumeration value="Custom"/>
 *     &lt;enumeration value="Dome"/>
 *     &lt;enumeration value="English"/>
 *     &lt;enumeration value="French"/>
 *     &lt;enumeration value="Georgian"/>
 *     &lt;enumeration value="High Rise"/>
 *     &lt;enumeration value="Mansion"/>
 *     &lt;enumeration value="Mediterranean"/>
 *     &lt;enumeration value="Modern"/>
 *     &lt;enumeration value="Prefab, Modular"/>
 *     &lt;enumeration value="Raised Ranch"/>
 *     &lt;enumeration value="Ranch/Rambler"/>
 *     &lt;enumeration value="Spanish"/>
 *     &lt;enumeration value="Traditional"/>
 *     &lt;enumeration value="Tudor"/>
 *     &lt;enumeration value="Unfinished/Under"/>
 *     &lt;enumeration value="Victorian"/>
 *     &lt;enumeration value="Unknown"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "")
@XmlEnum
public enum RpStyleTypeEnum {

    @XmlEnumValue("A-Frame")
    A_FRAME("A-Frame"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("Historical")
    HISTORICAL("Historical"),
    @XmlEnumValue("Bungalow")
    BUNGALOW("Bungalow"),
    @XmlEnumValue("Log Cabin/Rustic")
    LOG_CABIN_RUSTIC("Log Cabin/Rustic"),
    @XmlEnumValue("Cape Cod")
    CAPE_COD("Cape Cod"),
    @XmlEnumValue("Colonial")
    COLONIAL("Colonial"),
    @XmlEnumValue("Contemporary")
    CONTEMPORARY("Contemporary"),
    @XmlEnumValue("Conventional")
    CONVENTIONAL("Conventional"),
    @XmlEnumValue("Cottage")
    COTTAGE("Cottage"),
    @XmlEnumValue("Custom")
    CUSTOM("Custom"),
    @XmlEnumValue("Dome")
    DOME("Dome"),
    @XmlEnumValue("English")
    ENGLISH("English"),
    @XmlEnumValue("French")
    FRENCH("French"),
    @XmlEnumValue("Georgian")
    GEORGIAN("Georgian"),
    @XmlEnumValue("High Rise")
    HIGH_RISE("High Rise"),
    @XmlEnumValue("Mansion")
    MANSION("Mansion"),
    @XmlEnumValue("Mediterranean")
    MEDITERRANEAN("Mediterranean"),
    @XmlEnumValue("Modern")
    MODERN("Modern"),
    @XmlEnumValue("Prefab, Modular")
    PREFAB_MODULAR("Prefab, Modular"),
    @XmlEnumValue("Raised Ranch")
    RAISED_RANCH("Raised Ranch"),
    @XmlEnumValue("Ranch/Rambler")
    RANCH_RAMBLER("Ranch/Rambler"),
    @XmlEnumValue("Spanish")
    SPANISH("Spanish"),
    @XmlEnumValue("Traditional")
    TRADITIONAL("Traditional"),
    @XmlEnumValue("Tudor")
    TUDOR("Tudor"),
    @XmlEnumValue("Unfinished/Under")
    UNFINISHED_UNDER("Unfinished/Under"),
    @XmlEnumValue("Victorian")
    VICTORIAN("Victorian"),
    @XmlEnumValue("Unknown")
    UNKNOWN("Unknown");
    private final String value;

    RpStyleTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RpStyleTypeEnum fromValue(String v) {
        for (RpStyleTypeEnum c: RpStyleTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
