//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.16 at 01:50:47 PM MST 
//


package services.broker.objects.lexisnexis.cbr.response.actual;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for messageTypeRemarks.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="messageTypeRemarks">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Consumer Comments"/>
 *     &lt;enumeration value="Message Comments"/>
 *     &lt;enumeration value="Original Equipment"/>
 *     &lt;enumeration value="Current Carrier"/>
 *     &lt;enumeration value="Parallel Profile"/>
 *     &lt;enumeration value="Reason Code"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "messageTypeRemarks")
@XmlEnum
public enum MessageTypeRemarksEnum {

    @XmlEnumValue("Consumer Comments")
    CONSUMER_COMMENTS("Consumer Comments"),
    @XmlEnumValue("Message Comments")
    MESSAGE_COMMENTS("Message Comments"),
    @XmlEnumValue("Original Equipment")
    ORIGINAL_EQUIPMENT("Original Equipment"),
    @XmlEnumValue("Current Carrier")
    CURRENT_CARRIER("Current Carrier"),
    @XmlEnumValue("Parallel Profile")
    PARALLEL_PROFILE("Parallel Profile"),
    @XmlEnumValue("Reason Code")
    REASON_CODE("Reason Code");
    private final String value;

    MessageTypeRemarksEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MessageTypeRemarksEnum fromValue(String v) {
        for (MessageTypeRemarksEnum c: MessageTypeRemarksEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
