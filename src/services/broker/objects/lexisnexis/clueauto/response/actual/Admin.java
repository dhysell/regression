//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.16 at 04:49:21 PM MST 
//


package services.broker.objects.lexisnexis.clueauto.response.actual;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{http://cp.com/rules/client}commonAdminType">
 *       &lt;sequence>
 *         &lt;element name="status">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="processing complete, with results information"/>
 *               &lt;enumeration value="processing complete, results clear"/>
 *               &lt;enumeration value="not processed; product unavailable"/>
 *               &lt;enumeration value="not processed; invalid LexisNexis Account Number"/>
 *               &lt;enumeration value="not processed; insufficient search data"/>
 *               &lt;enumeration value="not processed; state limitation"/>
 *               &lt;enumeration value="not processed; errors"/>
 *               &lt;enumeration value="CLUE and Current Carrier are not Ordered"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="service_type">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="Subject and VIN search"/>
 *               &lt;enumeration value="Subject only search"/>
 *               &lt;enumeration value="VIN only search"/>
 *               &lt;enumeration value="Subject and VIN with Driver Discovery search"/>
 *               &lt;enumeration value="Subject with Driver Discovery search"/>
 *               &lt;enumeration value="Driver Discovery only search"/>
 *               &lt;enumeration value="Subject and VIN/Current Carrier"/>
 *               &lt;enumeration value="Subject Only/Current Carrier"/>
 *               &lt;enumeration value="Subject and VIN with Driver Discovery/Current Carrier"/>
 *               &lt;enumeration value="Subject Only with Driver Discovery/Current Carrier"/>
 *               &lt;enumeration value="CLUE and Current Carrier not ordered"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="report_usage">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;enumeration value="Personal Auto/Underwriting"/>
 *               &lt;enumeration value="Commercial Auto/Underwriting"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="requestor_producer_name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "status",
    "serviceType",
    "reportUsage",
    "requestorProducerName"
})
@XmlRootElement(name = "admin")
public class Admin
    extends CommonAdminType
{

    @XmlElement(required = true)
    protected Admin.AdminStatusEnum status;
    @XmlElement(name = "service_type", required = true)
    protected Admin.AdminServiceTypeEnum serviceType;
    @XmlElement(name = "report_usage", required = true)
    protected Admin.AdminReportUsageEnum reportUsage;
    @XmlElement(name = "requestor_producer_name")
    protected String requestorProducerName;

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.AdminStatusEnum }
     *     
     */
    public Admin.AdminStatusEnum getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.AdminStatusEnum }
     *     
     */
    public void setStatus(Admin.AdminStatusEnum value) {
        this.status = value;
    }

    /**
     * Gets the value of the serviceType property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.AdminServiceTypeEnum }
     *     
     */
    public Admin.AdminServiceTypeEnum getServiceType() {
        return serviceType;
    }

    /**
     * Sets the value of the serviceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.AdminServiceTypeEnum }
     *     
     */
    public void setServiceType(Admin.AdminServiceTypeEnum value) {
        this.serviceType = value;
    }

    /**
     * Gets the value of the reportUsage property.
     * 
     * @return
     *     possible object is
     *     {@link Admin.AdminReportUsageEnum }
     *     
     */
    public Admin.AdminReportUsageEnum getReportUsage() {
        return reportUsage;
    }

    /**
     * Sets the value of the reportUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Admin.AdminReportUsageEnum }
     *     
     */
    public void setReportUsage(Admin.AdminReportUsageEnum value) {
        this.reportUsage = value;
    }

    /**
     * Gets the value of the requestorProducerName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRequestorProducerName() {
        return requestorProducerName;
    }

    /**
     * Sets the value of the requestorProducerName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRequestorProducerName(String value) {
        this.requestorProducerName = value;
    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="Personal Auto/Underwriting"/>
     *     &lt;enumeration value="Commercial Auto/Underwriting"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum AdminReportUsageEnum {

        @XmlEnumValue("Personal Auto/Underwriting")
        PERSONAL_AUTO_UNDERWRITING("Personal Auto/Underwriting"),
        @XmlEnumValue("Commercial Auto/Underwriting")
        COMMERCIAL_AUTO_UNDERWRITING("Commercial Auto/Underwriting");
        private final String value;

        AdminReportUsageEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.AdminReportUsageEnum fromValue(String v) {
            for (Admin.AdminReportUsageEnum c: Admin.AdminReportUsageEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="Subject and VIN search"/>
     *     &lt;enumeration value="Subject only search"/>
     *     &lt;enumeration value="VIN only search"/>
     *     &lt;enumeration value="Subject and VIN with Driver Discovery search"/>
     *     &lt;enumeration value="Subject with Driver Discovery search"/>
     *     &lt;enumeration value="Driver Discovery only search"/>
     *     &lt;enumeration value="Subject and VIN/Current Carrier"/>
     *     &lt;enumeration value="Subject Only/Current Carrier"/>
     *     &lt;enumeration value="Subject and VIN with Driver Discovery/Current Carrier"/>
     *     &lt;enumeration value="Subject Only with Driver Discovery/Current Carrier"/>
     *     &lt;enumeration value="CLUE and Current Carrier not ordered"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum AdminServiceTypeEnum {

        @XmlEnumValue("Subject and VIN search")
        SUBJECT_AND_VIN_SEARCH("Subject and VIN search"),
        @XmlEnumValue("Subject only search")
        SUBJECT_ONLY_SEARCH("Subject only search"),
        @XmlEnumValue("VIN only search")
        VIN_ONLY_SEARCH("VIN only search"),
        @XmlEnumValue("Subject and VIN with Driver Discovery search")
        SUBJECT_AND_VIN_WITH_DRIVER_DISCOVERY_SEARCH("Subject and VIN with Driver Discovery search"),
        @XmlEnumValue("Subject with Driver Discovery search")
        SUBJECT_WITH_DRIVER_DISCOVERY_SEARCH("Subject with Driver Discovery search"),
        @XmlEnumValue("Driver Discovery only search")
        DRIVER_DISCOVERY_ONLY_SEARCH("Driver Discovery only search"),
        @XmlEnumValue("Subject and VIN/Current Carrier")
        SUBJECT_AND_VIN_CURRENT_CARRIER("Subject and VIN/Current Carrier"),
        @XmlEnumValue("Subject Only/Current Carrier")
        SUBJECT_ONLY_CURRENT_CARRIER("Subject Only/Current Carrier"),
        @XmlEnumValue("Subject and VIN with Driver Discovery/Current Carrier")
        SUBJECT_AND_VIN_WITH_DRIVER_DISCOVERY_CURRENT_CARRIER("Subject and VIN with Driver Discovery/Current Carrier"),
        @XmlEnumValue("Subject Only with Driver Discovery/Current Carrier")
        SUBJECT_ONLY_WITH_DRIVER_DISCOVERY_CURRENT_CARRIER("Subject Only with Driver Discovery/Current Carrier"),
        @XmlEnumValue("CLUE and Current Carrier not ordered")
        CLUE_AND_CURRENT_CARRIER_NOT_ORDERED("CLUE and Current Carrier not ordered");
        private final String value;

        AdminServiceTypeEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.AdminServiceTypeEnum fromValue(String v) {
            for (Admin.AdminServiceTypeEnum c: Admin.AdminServiceTypeEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }


    /**
     * <p>Java class for null.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * <p>
     * <pre>
     * &lt;simpleType>
     *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
     *     &lt;enumeration value="processing complete, with results information"/>
     *     &lt;enumeration value="processing complete, results clear"/>
     *     &lt;enumeration value="not processed; product unavailable"/>
     *     &lt;enumeration value="not processed; invalid LexisNexis Account Number"/>
     *     &lt;enumeration value="not processed; insufficient search data"/>
     *     &lt;enumeration value="not processed; state limitation"/>
     *     &lt;enumeration value="not processed; errors"/>
     *     &lt;enumeration value="CLUE and Current Carrier are not Ordered"/>
     *   &lt;/restriction>
     * &lt;/simpleType>
     * </pre>
     * 
     */
    @XmlType(name = "")
    @XmlEnum
    public enum AdminStatusEnum {

        @XmlEnumValue("processing complete, with results information")
        PROCESSING_COMPLETE_WITH_RESULTS_INFORMATION("processing complete, with results information"),
        @XmlEnumValue("processing complete, results clear")
        PROCESSING_COMPLETE_RESULTS_CLEAR("processing complete, results clear"),
        @XmlEnumValue("not processed; product unavailable")
        NOT_PROCESSED_PRODUCT_UNAVAILABLE("not processed; product unavailable"),
        @XmlEnumValue("not processed; invalid LexisNexis Account Number")
        NOT_PROCESSED_INVALID_LEXIS_NEXIS_ACCOUNT_NUMBER("not processed; invalid LexisNexis Account Number"),
        @XmlEnumValue("not processed; insufficient search data")
        NOT_PROCESSED_INSUFFICIENT_SEARCH_DATA("not processed; insufficient search data"),
        @XmlEnumValue("not processed; state limitation")
        NOT_PROCESSED_STATE_LIMITATION("not processed; state limitation"),
        @XmlEnumValue("not processed; errors")
        NOT_PROCESSED_ERRORS("not processed; errors"),
        @XmlEnumValue("CLUE and Current Carrier are not Ordered")
        CLUE_AND_CURRENT_CARRIER_ARE_NOT_ORDERED("CLUE and Current Carrier are not Ordered");
        private final String value;

        AdminStatusEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static Admin.AdminStatusEnum fromValue(String v) {
            for (Admin.AdminStatusEnum c: Admin.AdminStatusEnum.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

    }

}
